{"ast":null,"code":"var _jsxFileName = \"/Users/ivyg/Desktop/snake-reactjs/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = event => {\n      // press spacebar to start\n      if (event.key === \" \") {\n        this.setState({\n          running: true,\n          dir: \"a\" // left (default)\n\n        });\n      } else if (this.state.running && [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n        this.setState({\n          dir: event.key\n        });\n      }\n    };\n\n    this.typeOf = ([x, y]) => {\n      const food = this.state.food;\n\n      if (x === food[0] && y === food[1]) {\n        return \"food\";\n      }\n\n      const snake = this.state.snake;\n\n      for (let i = 0; i < snake.length; i++) {\n        if (x === snake[i][0] && y === snake[i][1]) {\n          return \"snake\";\n        }\n      } // background\n\n\n      return \"\";\n    };\n\n    this.state = {\n      // true if game is running\n      running: false,\n      // board dimensions\n      height: 20,\n      width: 30,\n      // the snake & the direction it's moving\n      snake: [],\n      dir: \"\",\n      // the food\n      food: []\n    };\n  }\n\n  componentDidMount() {\n    // event handler for keypress event\n    window.onkeypress = this.handleKeyPress;\n    this.initSnake(); // init food\n    // initialize timer\n\n    this.interval = setInterval(() => {\n      // redraw only if game is running\n      if (this.state.running) {\n        this.redrawSnake(); // redraw food\n      }\n    }, 1000);\n  } // TO-DO\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const snake = this.state.snake;\n    const food = this.state.food;\n\n    if (!snake.equals(prevState.snake) && this.isColliding(food, snake[0])) {\n      this.drawFood();\n    }\n  } // clear timer when component unmounts\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  initSnake() {\n    // center of the board\n    const x = this.state.width / 2;\n    const y = this.state.height / 2;\n    let snake = [];\n\n    for (let i = 0; i < 5; i++) {\n      snake.push([x + i, y]);\n    }\n\n    this.setState({\n      snake: snake\n    });\n  } // TO-DO\n\n\n  redrawSnake() {\n    if (!this.state.dir) {\n      return;\n    }\n\n    let snake = this.state.snake.slice();\n    snake.pop(); // remove snake tail\n\n    const x = snake[0][0];\n    const y = snake[0][1];\n    alert(x + ' ' + y); // math\n\n    let square;\n\n    switch (this.state.dir) {\n      case \"w\":\n        square = [x, y - 1];\n\n      case \"a\":\n        square = [x - 1, y];\n\n      case \"s\":\n        square = [x, y + 1];\n\n      case \"d\":\n        square = [x + 1, y];\n    }\n\n    snake.insert(0, square);\n    this.setState({\n      snake: snake\n    });\n  }\n\n  drawFood() {\n    // a random square on the board\n    let x = Math.floor(Math.random() * this.state.width);\n    let y = Math.floor(Math.random() * this.state.height); // find another square if it's part of the snake\n\n    while (this.isColliding([x, y], this.state.snake)) {\n      x = Math.floor(Math.random() * this.state.width);\n      y = Math.floor(Math.random() * this.state.height);\n    }\n\n    this.setState({\n      food: [x, y]\n    });\n  }\n\n  isColliding(square, arr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (square[0] === arr[i][0] && square[1] === arr[i][1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }, \"Snake\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      row: this.state.height,\n      col: this.state.width,\n      typeOf: this.typeOf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 6\n      }\n    })));\n  }\n\n} // eslint-disable-next-line no-extend-native\n\n\nArray.prototype.equals = function (arr) {\n  if (this.length !== arr.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] instanceof Array && arr[i] instanceof Array) {\n      if (!this[i].equals(arr[i])) return false;\n    } else if (this[i] !== arr[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nArray.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/ivyg/Desktop/snake-reactjs/src/game.js"],"names":["React","Board","Game","Component","constructor","props","handleKeyPress","event","key","setState","running","dir","state","includes","typeOf","x","y","food","snake","i","length","height","width","componentDidMount","window","onkeypress","initSnake","interval","setInterval","redrawSnake","componentDidUpdate","prevProps","prevState","equals","isColliding","drawFood","componentWillUnmount","clearInterval","push","slice","pop","alert","square","insert","Math","floor","random","arr","render","Array","prototype","index","item","splice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// true if game is running\n\t\t\trunning: false,\n\n\t\t\t// board dimensions\n\t\t\theight: 20,\n\t\t\twidth:  30,\n\n\t\t\t// the snake & the direction it's moving\n\t\t\tsnake: [],\n\t\t\tdir: \"\",\n\n\t\t\t// the food\n\t\t\tfood: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// event handler for keypress event\n\t\twindow.onkeypress = this.handleKeyPress;\n\n\t\tthis.initSnake();\n\t\t// init food\n\t\t\n\t\t// initialize timer\n\t\tthis.interval = setInterval(() => {\n\t\t\t// redraw only if game is running\n\t\t\tif (this.state.running) {\n\t\t\t\tthis.redrawSnake();\n\t\t\t\t// redraw food\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\t// TO-DO\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst snake = this.state.snake;\n\t\tconst food  = this.state.food;\n\n\t\tif (!snake.equals(prevState.snake)\n\t\t\t\t&& this.isColliding(food, snake[0])) {\n\t\t\tthis.drawFood();\n\t\t}\n\t}\n\n\t// clear timer when component unmounts\n  \tcomponentWillUnmount() {\n    \tclearInterval(this.interval);\n  \t}\n\n\thandleKeyPress = (event) => {\n\t\t// press spacebar to start\n\t\tif (event.key === \" \") {\n\t\t\tthis.setState({\n\t\t\t\trunning: true,\n\t\t\t\tdir: \"a\" // left (default)\n\t\t\t});\n\t\t} else if (this.state.running\n\t\t\t\t&& [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n\t\t\tthis.setState({\n\t\t\t\tdir: event.key\n\t\t\t});\n\t\t}\n\t}\n\n\t// return the type of the given square\n\ttypeOf = ([x, y]) => {\n\t\tconst food = this.state.food;\n\t\tif (x === food[0] && y === food[1]) {\n\t\t\treturn \"food\";\n\t\t}\n\n\t\tconst snake = this.state.snake;\n\t\tfor (let i = 0; i < snake.length; i++) {\n\t\t\tif (x === snake[i][0] && y === snake[i][1]) {\n\t\t\t\treturn \"snake\";\n\t\t\t}\n\t\t}\n\n\t\t// background\n\t\treturn \"\";\n\t}\n\n\tinitSnake() {\n\t\t// center of the board\n\t\tconst x = this.state.width  / 2;\n\t\tconst y = this.state.height / 2;\n\t\t\n\t\tlet snake = [];\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tsnake.push([x + i, y]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\t// TO-DO\n\tredrawSnake() {\n\t\tif (!this.state.dir) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet snake = this.state.snake.slice();\n\t\tsnake.pop(); // remove snake tail\n\n\t\tconst x = snake[0][0];\n\t\tconst y = snake[0][1];\n\t\talert(x + ' ' + y);\n\n\t\t// math\n\t\tlet square;\n\t\tswitch (this.state.dir) {\n\t\t\tcase \"w\":\n\t\t\t\tsquare = [x, y - 1];\n\t\t\tcase \"a\":\n\t\t\t\tsquare = [x - 1, y];\n\t\t\tcase \"s\":\n\t\t\t\tsquare = [x, y + 1];\n\t\t\tcase \"d\":\n\t\t\t\tsquare = [x + 1, y];\n\t\t}\n\n\t\tsnake.insert(0, square);\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\tdrawFood() {\n\t\t// a random square on the board\n\t\tlet x = Math.floor(Math.random() * this.state.width);\n\t\tlet y = Math.floor(Math.random() * this.state.height);\n\n\t\t// find another square if it's part of the snake\n\t\twhile (this.isColliding([x, y], this.state.snake)) {\n\t\t\tx = Math.floor(Math.random() * this.state.width);\n\t\t\ty = Math.floor(Math.random() * this.state.height);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfood: [x, y]\n\t\t});\n\t}\n\n\tisColliding(square, arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (square[0] === arr[i][0] && square[1] === arr[i][1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"game-title\">{\"Snake\"}</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\trow={this.state.height}\n\t\t\t\t\t\tcol={this.state.width}\n\t\t\t\t\t\ttypeOf={this.typeOf}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.equals = function(arr) {\n    if (this.length !== arr.length) {\n        return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] instanceof Array && arr[i] instanceof Array) {\n            if (!this[i].equals(arr[i]))\n                return false;       \n        } else if (this[i] !== arr[i]) { \n            return false;   \n        }           \n    }       \n    return true;\n}\n\nArray.prototype.insert = function(index, item) {\n    this.splice(index, 0, item);\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}