{"ast":null,"code":"var _jsxFileName = \"/Users/ivyg/Desktop/snake-reactjs/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = event => {\n      // press spacebar to start\n      if (event.key === \" \") {\n        this.setState({\n          dir: \"a\" // left (default)\n\n        });\n      } else if (this.state.dir && [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n        this.setState({\n          dir: event.key\n        });\n      }\n    };\n\n    this.typeOf = ([x, y]) => {\n      const food = this.state.food;\n\n      if ([x, y].equals(food)) {\n        return \"food\";\n      }\n\n      alert(this.state.snake);\n      const snake = this.state.snake;\n\n      for (let i = 1; i < snake.length; i++) {\n        if ([x, y].equals(snake[0])) {\n          return \"snake head\";\n        } else if ([x, y].equals(snake[i])) {\n          return \"snake\";\n        }\n      } // background\n\n\n      return \"\";\n    };\n\n    this.state = {\n      // board dimensions\n      height: 20,\n      width: 30,\n      // the snake & the direction it's moving\n      snake: [],\n      dir: \"\",\n      // the food\n      food: []\n    };\n  }\n\n  componentDidMount() {\n    // event handler for keypress event\n    window.onkeypress = this.handleKeyPress;\n    this.initSnake(); // init food\n    // init timer\n\n    this.interval = setInterval(() => {\n      // redraw only if game is running\n      if (this.state.dir) {\n        this.redrawSnake(); // redraw food\n      }\n    }, 300);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const snake = this.state.snake;\n    const dir = this.state.dir;\n\n    if (!snake.equals(prevState.snake) || dir !== prevState.dir) {\n      this.drawFood();\n    }\n  } // clear timer when component unmounts\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  initSnake() {\n    // center of the board\n    const x = this.state.width / 2;\n    const y = this.state.height / 2;\n    let snake = [];\n\n    for (let i = 0; i < 5; i++) {\n      snake.push([x + i, y]);\n    }\n\n    this.setState({\n      snake: snake\n    });\n  }\n\n  redrawSnake() {\n    if (!this.state.dir) {\n      return;\n    }\n\n    let snake = this.state.snake.slice(); // create a copy of snake\n\n    if (!this.next().equals(this.state.food)) {\n      snake.pop(); // remove tail\n    }\n\n    snake.unshift(this.next()); // add a new head\n\n    this.setState({\n      snake: snake\n    });\n  } // killSnake() {\n  // \tif () {\n  // \t\tthis.setState({\n  // \t\t\tdir: \"\"\n  // \t\t});\n  // \t}\n  // }\n\n\n  next() {\n    const x = this.state.snake[0][0];\n    const y = this.state.snake[0][1];\n\n    switch (this.state.dir) {\n      case \"w\":\n        return [x, y - 1];\n\n      case \"a\":\n        return [x - 1, y];\n\n      case \"s\":\n        return [x, y + 1];\n\n      case \"d\":\n        return [x + 1, y];\n\n      default:\n        return [x, y];\n    }\n  }\n\n  drawFood() {\n    if (this.state.dir && !this.state.snake[0].equals(this.state.food)) {\n      return;\n    } // a random square on the board\n\n\n    let x = Math.floor(Math.random() * this.state.width);\n    let y = Math.floor(Math.random() * this.state.height); // find another square if it's part of the snake\n\n    while (this.isColliding([x, y], this.state.snake)) {\n      x = Math.floor(Math.random() * this.state.width);\n      y = Math.floor(Math.random() * this.state.height);\n    }\n\n    this.setState({\n      food: [x, y]\n    });\n  }\n\n  isColliding(square, arr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (square.equals(arr[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }\n    }, \"Snake\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      row: this.state.height,\n      col: this.state.width,\n      typeOf: this.typeOf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 6\n      }\n    })));\n  }\n\n} // eslint-disable-next-line no-extend-native\n\n\nArray.prototype.equals = function (arr) {\n  if (this.length !== arr.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] instanceof Array && arr[i] instanceof Array) {\n      if (!this[i].equals(arr[i])) return false;\n    } else if (this[i] !== arr[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/ivyg/Desktop/snake-reactjs/src/game.js"],"names":["React","Board","Game","Component","constructor","props","handleKeyPress","event","key","setState","dir","state","includes","typeOf","x","y","food","equals","alert","snake","i","length","height","width","componentDidMount","window","onkeypress","initSnake","interval","setInterval","redrawSnake","componentDidUpdate","prevProps","prevState","drawFood","componentWillUnmount","clearInterval","push","slice","next","pop","unshift","Math","floor","random","isColliding","square","arr","render","Array","prototype"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SA+CnBC,cA/CmB,GA+CDC,KAAD,IAAW;AAC3B;AACA,UAAIA,KAAK,CAACC,GAAN,KAAc,GAAlB,EAAuB;AACtB,aAAKC,QAAL,CAAc;AACbC,UAAAA,GAAG,EAAE,GADQ,CACJ;;AADI,SAAd;AAGA,OAJD,MAIO,IAAI,KAAKC,KAAL,CAAWD,GAAX,IACN,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBE,QAArB,CAA8BL,KAAK,CAACC,GAApC,CADE,EACwC;AAC9C,aAAKC,QAAL,CAAc;AACbC,UAAAA,GAAG,EAAEH,KAAK,CAACC;AADE,SAAd;AAGA;AACD,KA3DkB;;AAAA,SA8DnBK,MA9DmB,GA8DV,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY;AACpB,YAAMC,IAAI,GAAG,KAAKL,KAAL,CAAWK,IAAxB;;AACA,UAAI,CAACF,CAAD,EAAIC,CAAJ,EAAOE,MAAP,CAAcD,IAAd,CAAJ,EAAyB;AACxB,eAAO,MAAP;AACA;;AACDE,MAAAA,KAAK,CAAC,KAAKP,KAAL,CAAWQ,KAAZ,CAAL;AACA,YAAMA,KAAK,GAAG,KAAKR,KAAL,CAAWQ,KAAzB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACtC,YAAI,CAACN,CAAD,EAAIC,CAAJ,EAAOE,MAAP,CAAcE,KAAK,CAAC,CAAD,CAAnB,CAAJ,EAA6B;AAC5B,iBAAO,YAAP;AACA,SAFD,MAEO,IAAI,CAACL,CAAD,EAAIC,CAAJ,EAAOE,MAAP,CAAcE,KAAK,CAACC,CAAD,CAAnB,CAAJ,EAA6B;AACnC,iBAAO,OAAP;AACA;AACD,OAbmB,CAepB;;;AACA,aAAO,EAAP;AACA,KA/EkB;;AAElB,SAAKT,KAAL,GAAa;AACZ;AACAW,MAAAA,MAAM,EAAE,EAFI;AAGZC,MAAAA,KAAK,EAAG,EAHI;AAKZ;AACAJ,MAAAA,KAAK,EAAE,EANK;AAOZT,MAAAA,GAAG,EAAE,EAPO;AASZ;AACAM,MAAAA,IAAI,EAAE;AAVM,KAAb;AAYA;;AAEDQ,EAAAA,iBAAiB,GAAG;AACnB;AACAC,IAAAA,MAAM,CAACC,UAAP,GAAoB,KAAKpB,cAAzB;AAEA,SAAKqB,SAAL,GAJmB,CAKnB;AAEA;;AACA,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AACjC;AACA,UAAI,KAAKlB,KAAL,CAAWD,GAAf,EAAoB;AACnB,aAAKoB,WAAL,GADmB,CAEnB;AACA;AACD,KAN0B,EAMxB,GANwB,CAA3B;AAOA;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,UAAMd,KAAK,GAAG,KAAKR,KAAL,CAAWQ,KAAzB;AACA,UAAMT,GAAG,GAAK,KAAKC,KAAL,CAAWD,GAAzB;;AAEA,QAAI,CAACS,KAAK,CAACF,MAAN,CAAagB,SAAS,CAACd,KAAvB,CAAD,IAAkCT,GAAG,KAAKuB,SAAS,CAACvB,GAAxD,EAA6D;AAC5D,WAAKwB,QAAL;AACA;AACD,GAzCiC,CA2ClC;;;AACEC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKR,QAAN,CAAb;AACD;;AAoCHD,EAAAA,SAAS,GAAG;AACX;AACA,UAAMb,CAAC,GAAG,KAAKH,KAAL,CAAWY,KAAX,GAAoB,CAA9B;AACA,UAAMR,CAAC,GAAG,KAAKJ,KAAL,CAAWW,MAAX,GAAoB,CAA9B;AAEA,QAAIH,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3BD,MAAAA,KAAK,CAACkB,IAAN,CAAW,CAACvB,CAAC,GAAGM,CAAL,EAAQL,CAAR,CAAX;AACA;;AAED,SAAKN,QAAL,CAAc;AACbU,MAAAA,KAAK,EAAEA;AADM,KAAd;AAGA;;AAEDW,EAAAA,WAAW,GAAG;AACb,QAAI,CAAC,KAAKnB,KAAL,CAAWD,GAAhB,EAAqB;AACpB;AACA;;AAED,QAAIS,KAAK,GAAG,KAAKR,KAAL,CAAWQ,KAAX,CAAiBmB,KAAjB,EAAZ,CALa,CAKyB;;AACtC,QAAI,CAAC,KAAKC,IAAL,GAAYtB,MAAZ,CAAmB,KAAKN,KAAL,CAAWK,IAA9B,CAAL,EAA0C;AACzCG,MAAAA,KAAK,CAACqB,GAAN,GADyC,CAC5B;AACb;;AACDrB,IAAAA,KAAK,CAACsB,OAAN,CAAc,KAAKF,IAAL,EAAd,EATa,CASe;;AAE5B,SAAK9B,QAAL,CAAc;AACbU,MAAAA,KAAK,EAAEA;AADM,KAAd;AAGA,GA/GiC,CAiHlC;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAoB,EAAAA,IAAI,GAAG;AACN,UAAMzB,CAAC,GAAG,KAAKH,KAAL,CAAWQ,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;AACA,UAAMJ,CAAC,GAAG,KAAKJ,KAAL,CAAWQ,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;;AAEA,YAAQ,KAAKR,KAAL,CAAWD,GAAnB;AACC,WAAK,GAAL;AACC,eAAO,CAACI,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAP;;AACD;AACC,eAAO,CAACD,CAAD,EAAIC,CAAJ,CAAP;AAVF;AAYA;;AAEDmB,EAAAA,QAAQ,GAAG;AACV,QAAI,KAAKvB,KAAL,CAAWD,GAAX,IACC,CAAC,KAAKC,KAAL,CAAWQ,KAAX,CAAiB,CAAjB,EAAoBF,MAApB,CAA2B,KAAKN,KAAL,CAAWK,IAAtC,CADN,EACmD;AAClD;AACA,KAJS,CAMV;;;AACA,QAAIF,CAAC,GAAG4B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKjC,KAAL,CAAWY,KAAtC,CAAR;AACA,QAAIR,CAAC,GAAG2B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKjC,KAAL,CAAWW,MAAtC,CAAR,CARU,CAUV;;AACA,WAAO,KAAKuB,WAAL,CAAiB,CAAC/B,CAAD,EAAIC,CAAJ,CAAjB,EAAyB,KAAKJ,KAAL,CAAWQ,KAApC,CAAP,EAAmD;AAClDL,MAAAA,CAAC,GAAG4B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKjC,KAAL,CAAWY,KAAtC,CAAJ;AACAR,MAAAA,CAAC,GAAG2B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKjC,KAAL,CAAWW,MAAtC,CAAJ;AACA;;AAED,SAAKb,QAAL,CAAc;AACbO,MAAAA,IAAI,EAAE,CAACF,CAAD,EAAIC,CAAJ;AADO,KAAd;AAGA;;AAED8B,EAAAA,WAAW,CAACC,MAAD,EAASC,GAAT,EAAc;AACxB,SAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,GAAG,CAAC1B,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAI0B,MAAM,CAAC7B,MAAP,CAAc8B,GAAG,CAAC3B,CAAD,CAAjB,CAAJ,EAA2B;AAC1B,eAAO,IAAP;AACA;AACD;;AACD,WAAO,KAAP;AACA;;AAED4B,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,OAA7B,CADD,eAEC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,KAAD;AACC,MAAA,GAAG,EAAE,KAAKrC,KAAL,CAAWW,MADjB;AAEC,MAAA,GAAG,EAAE,KAAKX,KAAL,CAAWY,KAFjB;AAGC,MAAA,MAAM,EAAE,KAAKV,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFD,CADD;AAYA;;AAvLiC,C,CA0LnC;;;AACAoC,KAAK,CAACC,SAAN,CAAgBjC,MAAhB,GAAyB,UAAS8B,GAAT,EAAc;AACnC,MAAI,KAAK1B,MAAL,KAAgB0B,GAAG,CAAC1B,MAAxB,EAAgC;AAC5B,WAAO,KAAP;AACH;;AAED,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAI,KAAKA,CAAL,aAAmB6B,KAAnB,IAA4BF,GAAG,CAAC3B,CAAD,CAAH,YAAkB6B,KAAlD,EAAyD;AACrD,UAAI,CAAC,KAAK7B,CAAL,EAAQH,MAAR,CAAe8B,GAAG,CAAC3B,CAAD,CAAlB,CAAL,EACI,OAAO,KAAP;AACP,KAHD,MAGO,IAAI,KAAKA,CAAL,MAAY2B,GAAG,CAAC3B,CAAD,CAAnB,EAAwB;AAC3B,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CAdD;;AAgBA,eAAelB,IAAf","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// board dimensions\n\t\t\theight: 20,\n\t\t\twidth:  30,\n\n\t\t\t// the snake & the direction it's moving\n\t\t\tsnake: [],\n\t\t\tdir: \"\",\n\n\t\t\t// the food\n\t\t\tfood: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// event handler for keypress event\n\t\twindow.onkeypress = this.handleKeyPress;\n\n\t\tthis.initSnake();\n\t\t// init food\n\t\t\n\t\t// init timer\n\t\tthis.interval = setInterval(() => {\n\t\t\t// redraw only if game is running\n\t\t\tif (this.state.dir) {\n\t\t\t\tthis.redrawSnake();\n\t\t\t\t// redraw food\n\t\t\t}\n\t\t}, 300);\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst snake = this.state.snake;\n\t\tconst dir   = this.state.dir;\n\n\t\tif (!snake.equals(prevState.snake) || dir !== prevState.dir) {\n\t\t\tthis.drawFood();\n\t\t}\n\t}\n\n\t// clear timer when component unmounts\n  \tcomponentWillUnmount() {\n    \tclearInterval(this.interval);\n  \t}\n\n\thandleKeyPress = (event) => {\n\t\t// press spacebar to start\n\t\tif (event.key === \" \") {\n\t\t\tthis.setState({\n\t\t\t\tdir: \"a\" // left (default)\n\t\t\t});\n\t\t} else if (this.state.dir\n\t\t\t\t&& [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n\t\t\tthis.setState({\n\t\t\t\tdir: event.key\n\t\t\t});\n\t\t}\n\t}\n\n\t// return the type of the given square\n\ttypeOf = ([x, y]) => {\n\t\tconst food = this.state.food;\n\t\tif ([x, y].equals(food)) {\n\t\t\treturn \"food\";\n\t\t}\n\t\talert(this.state.snake);\n\t\tconst snake = this.state.snake;\n\t\tfor (let i = 1; i < snake.length; i++) {\n\t\t\tif ([x, y].equals(snake[0])) {\n\t\t\t\treturn \"snake head\";\n\t\t\t} else if ([x, y].equals(snake[i])) {\n\t\t\t\treturn \"snake\";\n\t\t\t}\n\t\t}\n\n\t\t// background\n\t\treturn \"\";\n\t}\n\n\tinitSnake() {\n\t\t// center of the board\n\t\tconst x = this.state.width  / 2;\n\t\tconst y = this.state.height / 2;\n\t\t\n\t\tlet snake = [];\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tsnake.push([x + i, y]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\tredrawSnake() {\n\t\tif (!this.state.dir) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet snake = this.state.snake.slice(); // create a copy of snake\n\t\tif (!this.next().equals(this.state.food)) {\n\t\t\tsnake.pop(); // remove tail\n\t\t}\n\t\tsnake.unshift(this.next()); // add a new head\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\t// killSnake() {\n\t// \tif () {\n\n\t// \t\tthis.setState({\n\t// \t\t\tdir: \"\"\n\t// \t\t});\n\t// \t}\n\t// }\n\n\tnext() {\n\t\tconst x = this.state.snake[0][0];\n\t\tconst y = this.state.snake[0][1];\n\n\t\tswitch (this.state.dir) {\n\t\t\tcase \"w\":\n\t\t\t\treturn [x, y - 1];\n\t\t\tcase \"a\":\n\t\t\t\treturn [x - 1, y];\n\t\t\tcase \"s\":\n\t\t\t\treturn [x, y + 1];\n\t\t\tcase \"d\":\n\t\t\t\treturn [x + 1, y];\n\t\t\tdefault:\n\t\t\t\treturn [x, y];\n\t\t}\n\t}\n\n\tdrawFood() {\n\t\tif (this.state.dir\n\t\t\t\t&& !this.state.snake[0].equals(this.state.food)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// a random square on the board\n\t\tlet x = Math.floor(Math.random() * this.state.width);\n\t\tlet y = Math.floor(Math.random() * this.state.height);\n\n\t\t// find another square if it's part of the snake\n\t\twhile (this.isColliding([x, y], this.state.snake)) {\n\t\t\tx = Math.floor(Math.random() * this.state.width);\n\t\t\ty = Math.floor(Math.random() * this.state.height);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfood: [x, y]\n\t\t});\n\t}\n\n\tisColliding(square, arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (square.equals(arr[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"game-title\">{\"Snake\"}</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\trow={this.state.height}\n\t\t\t\t\t\tcol={this.state.width}\n\t\t\t\t\t\ttypeOf={this.typeOf}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.equals = function(arr) {\n    if (this.length !== arr.length) {\n        return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] instanceof Array && arr[i] instanceof Array) {\n            if (!this[i].equals(arr[i]))\n                return false;       \n        } else if (this[i] !== arr[i]) { \n            return false;   \n        }           \n    }       \n    return true;\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}