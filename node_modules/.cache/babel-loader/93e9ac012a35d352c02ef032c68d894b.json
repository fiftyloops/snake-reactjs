{"ast":null,"code":"var _jsxFileName = \"/Users/ivyg/Desktop/snake-reactjs/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = event => {\n      // start game\n      if (!this.state.dir && event.key === \" \") {\n        this.setState({\n          dir: \"a\" // left (default)\n\n        }); // reset game\n      } else if (this.state.dir === \"x\" && event.key === \" \") {\n        this.initSnake();\n        this.setState({\n          dir: \"\"\n        });\n      } else if (this.state.dir && [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n        if (this.state.dir === \"x\") {\n          return;\n        }\n\n        this.setState({\n          dir: event.key\n        });\n      }\n    };\n\n    this.typeOf = ([x, y]) => {\n      const food = this.state.food;\n\n      if ([x, y].equals(food)) {\n        return \"food\";\n      }\n\n      const snake = this.state.snake;\n\n      for (let i = 0; i < snake.length; i++) {\n        if ([x, y].equals(snake[i])) {\n          if (i === 0) {\n            return \"snake head\";\n          } else {\n            return \"snake tail\";\n          }\n        }\n      } // background\n\n\n      return \"\";\n    };\n\n    this.state = {\n      // board dimensions\n      height: 20,\n      width: 30,\n      // snake & the direction it's moving\n      snake: [],\n      dir: \"\",\n      // food\n      food: []\n    };\n  }\n\n  componentDidMount() {\n    // event handler for keypress event\n    window.onkeypress = this.handleKeyPress;\n    this.initSnake(); // init food\n    // init timer\n\n    this.interval = setInterval(() => {\n      // redraw only if game is running\n      if (this.state.dir) {\n        this.redrawSnake(); // redraw food\n      }\n    }, 300);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const snake = this.state.snake;\n    const dir = this.state.dir;\n\n    if (!snake.equals(prevState.snake) || dir !== prevState.dir) {\n      this.drawFood();\n    }\n  } // clear timer when component unmounts\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  initSnake() {\n    // center of the board\n    const x = this.state.width / 2;\n    const y = this.state.height / 2;\n    let snake = [];\n\n    for (let i = 0; i < 5; i++) {\n      snake.push([x + i, y]);\n    }\n\n    this.setState({\n      snake: snake\n    });\n  }\n\n  redrawSnake() {\n    if (!this.state.dir || this.state.dir === \"x\") {\n      return;\n    } // create a copy of snake\n\n\n    const snake = this.state.snake.slice();\n    const next = this.next(); // ==============================\n    //           snake.die\n    // ==============================\n    // snake is moving off the screen\n\n    if (next[0] < 0 || next[0] >= this.state.width || next[1] < 0 || next[1] >= this.state.height // snake is moving into itself\n    || this.isColliding(next, snake.slice(1))) {\n      this.setState({\n        dir: \"x\"\n      });\n    } // ==============================\n    //           snake.eat\n    // ==============================\n\n\n    if (!next.equals(this.state.food)) {\n      snake.pop(); // remove tail\n    }\n\n    snake.unshift(next); // add a new head\n\n    this.setState({\n      snake: snake\n    });\n  }\n\n  next() {\n    const x = this.state.snake[0][0];\n    const y = this.state.snake[0][1];\n\n    switch (this.state.dir) {\n      case \"w\":\n        return [x, y - 1];\n\n      case \"a\":\n        return [x - 1, y];\n\n      case \"s\":\n        return [x, y + 1];\n\n      case \"d\":\n        return [x + 1, y];\n\n      default:\n        return [x, y];\n    }\n  }\n\n  drawFood() {\n    const snake = this.state.snake;\n    const food = this.state.food;\n    const width = this.state.width;\n    const height = this.state.height;\n\n    if (this.state.dir // snake is not eating the food\n    && !snake[0].equals(food)) {\n      return;\n    } else if (this.state.dir === \"x\") {\n      // snake has died (rip)\n      return;\n    } // a random square on the board\n\n\n    let x = Math.floor(Math.random() * width);\n    let y = Math.floor(Math.random() * height); // find another square if it's part of the snake\n\n    while (this.isColliding([x, y], snake)) {\n      x = Math.floor(Math.random() * width);\n      y = Math.floor(Math.random() * height);\n    }\n\n    this.setState({\n      food: [x, y]\n    });\n  }\n\n  isColliding(square, arr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (square.equals(arr[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 5\n      }\n    }, \"Snake\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      row: this.state.height,\n      col: this.state.width,\n      typeOf: this.typeOf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 6\n      }\n    })));\n  }\n\n} // eslint-disable-next-line no-extend-native\n\n\nArray.prototype.equals = function (arr) {\n  if (this.length !== arr.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] instanceof Array && arr[i] instanceof Array) {\n      if (!this[i].equals(arr[i])) return false;\n    } else if (this[i] !== arr[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/ivyg/Desktop/snake-reactjs/src/game.js"],"names":["React","Board","Game","Component","constructor","props","handleKeyPress","event","state","dir","key","setState","initSnake","includes","typeOf","x","y","food","equals","snake","i","length","height","width","componentDidMount","window","onkeypress","interval","setInterval","redrawSnake","componentDidUpdate","prevProps","prevState","drawFood","componentWillUnmount","clearInterval","push","slice","next","isColliding","pop","unshift","Math","floor","random","square","arr","render","Array","prototype"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SA+CnBC,cA/CmB,GA+CDC,KAAD,IAAW;AAC3B;AACA,UAAI,CAAC,KAAKC,KAAL,CAAWC,GAAZ,IAAmBF,KAAK,CAACG,GAAN,KAAc,GAArC,EAA0C;AACzC,aAAKC,QAAL,CAAc;AACbF,UAAAA,GAAG,EAAE,GADQ,CACJ;;AADI,SAAd,EADyC,CAI1C;AACC,OALD,MAKO,IAAI,KAAKD,KAAL,CAAWC,GAAX,KAAmB,GAAnB,IAA0BF,KAAK,CAACG,GAAN,KAAc,GAA5C,EAAiD;AACvD,aAAKE,SAAL;AACA,aAAKD,QAAL,CAAc;AACbF,UAAAA,GAAG,EAAE;AADQ,SAAd;AAGA,OALM,MAKA,IAAI,KAAKD,KAAL,CAAWC,GAAX,IACN,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBI,QAArB,CAA8BN,KAAK,CAACG,GAApC,CADE,EACwC;AAC9C,YAAI,KAAKF,KAAL,CAAWC,GAAX,KAAmB,GAAvB,EAA4B;AAC3B;AACA;;AACD,aAAKE,QAAL,CAAc;AACbF,UAAAA,GAAG,EAAEF,KAAK,CAACG;AADE,SAAd;AAGA;AACD,KApEkB;;AAAA,SAuEnBI,MAvEmB,GAuEV,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY;AACpB,YAAMC,IAAI,GAAG,KAAKT,KAAL,CAAWS,IAAxB;;AACA,UAAI,CAACF,CAAD,EAAIC,CAAJ,EAAOE,MAAP,CAAcD,IAAd,CAAJ,EAAyB;AACxB,eAAO,MAAP;AACA;;AAED,YAAME,KAAK,GAAG,KAAKX,KAAL,CAAWW,KAAzB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACtC,YAAI,CAACL,CAAD,EAAIC,CAAJ,EAAOE,MAAP,CAAcC,KAAK,CAACC,CAAD,CAAnB,CAAJ,EAA6B;AAC5B,cAAIA,CAAC,KAAK,CAAV,EAAa;AACZ,mBAAO,YAAP;AACA,WAFD,MAEO;AACN,mBAAO,YAAP;AACA;AACD;AACD,OAfmB,CAiBpB;;;AACA,aAAO,EAAP;AACA,KA1FkB;;AAElB,SAAKZ,KAAL,GAAa;AACZ;AACAc,MAAAA,MAAM,EAAE,EAFI;AAGZC,MAAAA,KAAK,EAAG,EAHI;AAKZ;AACAJ,MAAAA,KAAK,EAAE,EANK;AAOZV,MAAAA,GAAG,EAAE,EAPO;AASZ;AACAQ,MAAAA,IAAI,EAAE;AAVM,KAAb;AAYA;;AAEDO,EAAAA,iBAAiB,GAAG;AACnB;AACAC,IAAAA,MAAM,CAACC,UAAP,GAAoB,KAAKpB,cAAzB;AAEA,SAAKM,SAAL,GAJmB,CAKnB;AAEA;;AACA,SAAKe,QAAL,GAAgBC,WAAW,CAAC,MAAM;AACjC;AACA,UAAI,KAAKpB,KAAL,CAAWC,GAAf,EAAoB;AACnB,aAAKoB,WAAL,GADmB,CAEnB;AACA;AACD,KAN0B,EAMxB,GANwB,CAA3B;AAOA;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,UAAMb,KAAK,GAAG,KAAKX,KAAL,CAAWW,KAAzB;AACA,UAAMV,GAAG,GAAK,KAAKD,KAAL,CAAWC,GAAzB;;AAEA,QAAI,CAACU,KAAK,CAACD,MAAN,CAAac,SAAS,CAACb,KAAvB,CAAD,IAAkCV,GAAG,KAAKuB,SAAS,CAACvB,GAAxD,EAA6D;AAC5D,WAAKwB,QAAL;AACA;AACD,GAzCiC,CA2ClC;;;AACEC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKR,QAAN,CAAb;AACD;;AA+CHf,EAAAA,SAAS,GAAG;AACX;AACA,UAAMG,CAAC,GAAG,KAAKP,KAAL,CAAWe,KAAX,GAAoB,CAA9B;AACA,UAAMP,CAAC,GAAG,KAAKR,KAAL,CAAWc,MAAX,GAAoB,CAA9B;AAEA,QAAIH,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3BD,MAAAA,KAAK,CAACiB,IAAN,CAAW,CAACrB,CAAC,GAAGK,CAAL,EAAQJ,CAAR,CAAX;AACA;;AAED,SAAKL,QAAL,CAAc;AACbQ,MAAAA,KAAK,EAAEA;AADM,KAAd;AAGA;;AAEDU,EAAAA,WAAW,GAAG;AACb,QAAI,CAAC,KAAKrB,KAAL,CAAWC,GAAZ,IAAmB,KAAKD,KAAL,CAAWC,GAAX,KAAmB,GAA1C,EAA+C;AAC9C;AACA,KAHY,CAKb;;;AACA,UAAMU,KAAK,GAAG,KAAKX,KAAL,CAAWW,KAAX,CAAiBkB,KAAjB,EAAd;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAL,EAAb,CAPa,CASb;AACA;AACA;AAEA;;AACA,QAAIA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,IAAW,KAAK9B,KAAL,CAAWe,KAArC,IACCe,IAAI,CAAC,CAAD,CAAJ,GAAU,CADX,IACgBA,IAAI,CAAC,CAAD,CAAJ,IAAW,KAAK9B,KAAL,CAAWc,MADtC,CAEF;AAFE,OAGC,KAAKiB,WAAL,CAAiBD,IAAjB,EAAuBnB,KAAK,CAACkB,KAAN,CAAY,CAAZ,CAAvB,CAHL,EAG6C;AAC5C,WAAK1B,QAAL,CAAc;AACbF,QAAAA,GAAG,EAAE;AADQ,OAAd;AAGA,KArBY,CAuBb;AACA;AACA;;;AAEA,QAAI,CAAC6B,IAAI,CAACpB,MAAL,CAAY,KAAKV,KAAL,CAAWS,IAAvB,CAAL,EAAmC;AAClCE,MAAAA,KAAK,CAACqB,GAAN,GADkC,CACrB;AACb;;AACDrB,IAAAA,KAAK,CAACsB,OAAN,CAAcH,IAAd,EA9Ba,CA8BQ;;AAErB,SAAK3B,QAAL,CAAc;AACbQ,MAAAA,KAAK,EAAEA;AADM,KAAd;AAGA;;AAEDmB,EAAAA,IAAI,GAAG;AACN,UAAMvB,CAAC,GAAG,KAAKP,KAAL,CAAWW,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;AACA,UAAMH,CAAC,GAAG,KAAKR,KAAL,CAAWW,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;;AAEA,YAAQ,KAAKX,KAAL,CAAWC,GAAnB;AACC,WAAK,GAAL;AACC,eAAO,CAACM,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAP;;AACD,WAAK,GAAL;AACC,eAAO,CAACD,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAP;;AACD;AACC,eAAO,CAACD,CAAD,EAAIC,CAAJ,CAAP;AAVF;AAYA;;AAEDiB,EAAAA,QAAQ,GAAG;AACV,UAAMd,KAAK,GAAI,KAAKX,KAAL,CAAWW,KAA1B;AACA,UAAMF,IAAI,GAAK,KAAKT,KAAL,CAAWS,IAA1B;AACA,UAAMM,KAAK,GAAI,KAAKf,KAAL,CAAWe,KAA1B;AACA,UAAMD,MAAM,GAAG,KAAKd,KAAL,CAAWc,MAA1B;;AAEA,QAAI,KAAKd,KAAL,CAAWC,GAAX,CAAe;AAAf,OACC,CAACU,KAAK,CAAC,CAAD,CAAL,CAASD,MAAT,CAAgBD,IAAhB,CADN,EAC6B;AAC5B;AACA,KAHD,MAGO,IAAI,KAAKT,KAAL,CAAWC,GAAX,KAAmB,GAAvB,EAA4B;AAAE;AACpC;AACA,KAXS,CAaV;;;AACA,QAAIM,CAAC,GAAG2B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBrB,KAA3B,CAAR;AACA,QAAIP,CAAC,GAAG0B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,MAA3B,CAAR,CAfU,CAiBV;;AACA,WAAO,KAAKiB,WAAL,CAAiB,CAACxB,CAAD,EAAIC,CAAJ,CAAjB,EAAyBG,KAAzB,CAAP,EAAwC;AACvCJ,MAAAA,CAAC,GAAG2B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBrB,KAA3B,CAAJ;AACAP,MAAAA,CAAC,GAAG0B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,MAA3B,CAAJ;AACA;;AAED,SAAKX,QAAL,CAAc;AACbM,MAAAA,IAAI,EAAE,CAACF,CAAD,EAAIC,CAAJ;AADO,KAAd;AAGA;;AAEDuB,EAAAA,WAAW,CAACM,MAAD,EAASC,GAAT,EAAc;AACxB,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,GAAG,CAACzB,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAIyB,MAAM,CAAC3B,MAAP,CAAc4B,GAAG,CAAC1B,CAAD,CAAjB,CAAJ,EAA2B;AAC1B,eAAO,IAAP;AACA;AACD;;AACD,WAAO,KAAP;AACA;;AAED2B,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,OAA7B,CADD,eAEC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,KAAD;AACC,MAAA,GAAG,EAAE,KAAKvC,KAAL,CAAWc,MADjB;AAEC,MAAA,GAAG,EAAE,KAAKd,KAAL,CAAWe,KAFjB;AAGC,MAAA,MAAM,EAAE,KAAKT,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFD,CADD;AAYA;;AArNiC,C,CAwNnC;;;AACAkC,KAAK,CAACC,SAAN,CAAgB/B,MAAhB,GAAyB,UAAS4B,GAAT,EAAc;AACnC,MAAI,KAAKzB,MAAL,KAAgByB,GAAG,CAACzB,MAAxB,EAAgC;AAC5B,WAAO,KAAP;AACH;;AAED,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAI,KAAKA,CAAL,aAAmB4B,KAAnB,IAA4BF,GAAG,CAAC1B,CAAD,CAAH,YAAkB4B,KAAlD,EAAyD;AACrD,UAAI,CAAC,KAAK5B,CAAL,EAAQF,MAAR,CAAe4B,GAAG,CAAC1B,CAAD,CAAlB,CAAL,EACI,OAAO,KAAP;AACP,KAHD,MAGO,IAAI,KAAKA,CAAL,MAAY0B,GAAG,CAAC1B,CAAD,CAAnB,EAAwB;AAC3B,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CAdD;;AAgBA,eAAelB,IAAf","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// board dimensions\n\t\t\theight: 20,\n\t\t\twidth:  30,\n\n\t\t\t// snake & the direction it's moving\n\t\t\tsnake: [],\n\t\t\tdir: \"\",\n\n\t\t\t// food\n\t\t\tfood: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// event handler for keypress event\n\t\twindow.onkeypress = this.handleKeyPress;\n\n\t\tthis.initSnake();\n\t\t// init food\n\t\t\n\t\t// init timer\n\t\tthis.interval = setInterval(() => {\n\t\t\t// redraw only if game is running\n\t\t\tif (this.state.dir) {\n\t\t\t\tthis.redrawSnake();\n\t\t\t\t// redraw food\n\t\t\t}\n\t\t}, 300);\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst snake = this.state.snake;\n\t\tconst dir   = this.state.dir;\n\n\t\tif (!snake.equals(prevState.snake) || dir !== prevState.dir) {\n\t\t\tthis.drawFood();\n\t\t}\n\t}\n\n\t// clear timer when component unmounts\n  \tcomponentWillUnmount() {\n    \tclearInterval(this.interval);\n  \t}\n\n\thandleKeyPress = (event) => {\n\t\t// start game\n\t\tif (!this.state.dir && event.key === \" \") {\n\t\t\tthis.setState({\n\t\t\t\tdir: \"a\" // left (default)\n\t\t\t});\n\t\t// reset game\n\t\t} else if (this.state.dir === \"x\" && event.key === \" \") {\n\t\t\tthis.initSnake();\n\t\t\tthis.setState({\n\t\t\t\tdir: \"\"\n\t\t\t});\n\t\t} else if (this.state.dir\n\t\t\t\t&& [\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n\t\t\tif (this.state.dir === \"x\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tdir: event.key\n\t\t\t});\n\t\t}\n\t}\n\n\t// return the type of the given square\n\ttypeOf = ([x, y]) => {\n\t\tconst food = this.state.food;\n\t\tif ([x, y].equals(food)) {\n\t\t\treturn \"food\";\n\t\t}\n\n\t\tconst snake = this.state.snake;\n\t\tfor (let i = 0; i < snake.length; i++) {\n\t\t\tif ([x, y].equals(snake[i])) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\treturn \"snake head\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"snake tail\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// background\n\t\treturn \"\";\n\t}\n\n\tinitSnake() {\n\t\t// center of the board\n\t\tconst x = this.state.width  / 2;\n\t\tconst y = this.state.height / 2;\n\t\t\n\t\tlet snake = [];\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tsnake.push([x + i, y]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\tredrawSnake() {\n\t\tif (!this.state.dir || this.state.dir === \"x\") {\n\t\t\treturn;\n\t\t}\n\n\t\t// create a copy of snake\n\t\tconst snake = this.state.snake.slice();\n\t\tconst next = this.next();\n\n\t\t// ==============================\n\t\t//           snake.die\n\t\t// ==============================\n\n\t\t// snake is moving off the screen\n\t\tif (next[0] < 0 || next[0] >= this.state.width\n\t\t\t\t|| next[1] < 0 || next[1] >= this.state.height\n\t\t\t\t// snake is moving into itself\n\t\t\t\t|| this.isColliding(next, snake.slice(1))) {\n\t\t\tthis.setState({\n\t\t\t\tdir: \"x\"\n\t\t\t});\n\t\t}\n\n\t\t// ==============================\n\t\t//           snake.eat\n\t\t// ==============================\n\n\t\tif (!next.equals(this.state.food)) {\n\t\t\tsnake.pop(); // remove tail\n\t\t}\n\t\tsnake.unshift(next); // add a new head\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\tnext() {\n\t\tconst x = this.state.snake[0][0];\n\t\tconst y = this.state.snake[0][1];\n\n\t\tswitch (this.state.dir) {\n\t\t\tcase \"w\":\n\t\t\t\treturn [x, y - 1];\n\t\t\tcase \"a\":\n\t\t\t\treturn [x - 1, y];\n\t\t\tcase \"s\":\n\t\t\t\treturn [x, y + 1];\n\t\t\tcase \"d\":\n\t\t\t\treturn [x + 1, y];\n\t\t\tdefault:\n\t\t\t\treturn [x, y];\n\t\t}\n\t}\n\n\tdrawFood() {\n\t\tconst snake  = this.state.snake;\n\t\tconst food   = this.state.food;\n\t\tconst width  = this.state.width;\n\t\tconst height = this.state.height;\n\n\t\tif (this.state.dir // snake is not eating the food\n\t\t\t\t&& !snake[0].equals(food)) {\n\t\t\treturn;\n\t\t} else if (this.state.dir === \"x\") { // snake has died (rip)\n\t\t\treturn;\n\t\t}\n\n\t\t// a random square on the board\n\t\tlet x = Math.floor(Math.random() * width);\n\t\tlet y = Math.floor(Math.random() * height);\n\n\t\t// find another square if it's part of the snake\n\t\twhile (this.isColliding([x, y], snake)) {\n\t\t\tx = Math.floor(Math.random() * width);\n\t\t\ty = Math.floor(Math.random() * height);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfood: [x, y]\n\t\t});\n\t}\n\n\tisColliding(square, arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (square.equals(arr[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"game-title\">{\"Snake\"}</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\trow={this.state.height}\n\t\t\t\t\t\tcol={this.state.width}\n\t\t\t\t\t\ttypeOf={this.typeOf}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.equals = function(arr) {\n    if (this.length !== arr.length) {\n        return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] instanceof Array && arr[i] instanceof Array) {\n            if (!this[i].equals(arr[i]))\n                return false;       \n        } else if (this[i] !== arr[i]) { \n            return false;   \n        }           \n    }       \n    return true;\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}