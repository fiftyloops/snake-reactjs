{"ast":null,"code":"var _jsxFileName = \"/Users/ivyg/Desktop/snake-reactjs/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = event => {\n      // press spacebar to start\n      if (event.key === \" \") {\n        this.setState({\n          running: true\n        });\n      } else if ([\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n        this.setState({\n          dir: event.key\n        });\n      }\n    };\n\n    this.typeOf = ([x, y]) => {\n      const food = this.state.food;\n\n      if (x === food[0] && y === food[1]) {\n        return \"food\";\n      }\n\n      const snake = this.state.snake;\n\n      for (let i = 0; i < snake.length; i++) {\n        if (x === snake[i][0] && y === snake[i][1]) {\n          return \"snake\";\n        }\n      } // background\n\n\n      return \"\";\n    };\n\n    this.state = {\n      // true if game is running\n      running: false,\n      // board dimensions\n      height: 20,\n      width: 30,\n      // the snake & the direction it's moving\n      snake: [],\n      dir: \"\",\n      // the food\n      food: []\n    };\n  }\n\n  componentDidMount() {\n    // event handler for keypress event\n    window.onkeypress = this.handleKeyPress;\n    this.initSnake(); // init food\n    // initialize timer\n\n    this.interval = setInterval(() => {\n      // redraw only if game is running\n      if (this.state.running) {\n        this.redrawSnake(); // redraw food\n      }\n    }, 100);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.snake !== prevState.snake) {\n      drawFood();\n    }\n  } // clear timer when component unmounts\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  initSnake() {\n    // center of the board\n    const x = this.state.width / 2;\n    const y = this.state.height / 2;\n    let snake = [];\n\n    for (let i = 0; i < 5; i++) {\n      snake.push([x + i, y]);\n    }\n\n    this.setState({\n      snake: snake\n    });\n  }\n\n  redrawSnake() {}\n\n  drawFood() {\n    // a random square on the board\n    let x = Math.floor(Math.random() * this.state.width);\n    let y = Math.floor(Math.random() * this.state.height); // find another square if it's part of the snake\n\n    while (this.isColliding([x, y], this.state.snake)) {\n      x = Math.floor(Math.random() * this.state.width);\n      y = Math.floor(Math.random() * this.state.height);\n    }\n\n    this.setState({\n      food: [x, y]\n    });\n  }\n\n  isColliding(square, arr) {\n    arr.forEach(e => {\n      if (square[0] === e[0] && square[1] === e[1]) {\n        return true;\n      }\n    });\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }, \"Snake\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      row: this.state.height,\n      col: this.state.width,\n      typeOf: this.typeOf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    })));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/ivyg/Desktop/snake-reactjs/src/game.js"],"names":["React","Board","Game","Component","constructor","props","handleKeyPress","event","key","setState","running","includes","dir","typeOf","x","y","food","state","snake","i","length","height","width","componentDidMount","window","onkeypress","initSnake","interval","setInterval","redrawSnake","componentDidUpdate","prevProps","prevState","drawFood","componentWillUnmount","clearInterval","push","Math","floor","random","isColliding","square","arr","forEach","e","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// true if game is running\n\t\t\trunning: false,\n\n\t\t\t// board dimensions\n\t\t\theight: 20,\n\t\t\twidth:  30,\n\n\t\t\t// the snake & the direction it's moving\n\t\t\tsnake: [],\n\t\t\tdir: \"\",\n\n\t\t\t// the food\n\t\t\tfood: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// event handler for keypress event\n\t\twindow.onkeypress = this.handleKeyPress;\n\n\t\tthis.initSnake();\n\t\t// init food\n\t\t\n\t\t// initialize timer\n\t\tthis.interval = setInterval(() => {\n\t\t\t// redraw only if game is running\n\t\t\tif (this.state.running) {\n\t\t\t\tthis.redrawSnake();\n\t\t\t\t// redraw food\n\t\t\t}\n\t\t}, 100);\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (this.state.snake !== prevState.snake) {\n\t\t\tdrawFood();\n\t\t}\n\t}\n\n\t// clear timer when component unmounts\n  \tcomponentWillUnmount() {\n    \tclearInterval(this.interval);\n  \t}\n\n\thandleKeyPress = (event) => {\n\t\t// press spacebar to start\n\t\tif (event.key === \" \") {\n\t\t\tthis.setState({\n\t\t\t\trunning: true\n\t\t\t});\n\n\t\t} else if ([\"w\", \"a\", \"s\", \"d\"].includes(event.key)) {\n\n\t\t\tthis.setState({\n\t\t\t\tdir: event.key\n\t\t\t});\n\t\t}\n\t}\n\n\t// return the type of the given square\n\ttypeOf = ([x, y]) => {\n\t\tconst food = this.state.food;\n\t\tif (x === food[0] && y === food[1]) {\n\t\t\treturn \"food\";\n\t\t}\n\n\t\tconst snake = this.state.snake;\n\t\tfor (let i = 0; i < snake.length; i++) {\n\t\t\tif (x === snake[i][0] && y === snake[i][1]) {\n\t\t\t\treturn \"snake\";\n\t\t\t}\n\t\t}\n\n\t\t// background\n\t\treturn \"\";\n\t}\n\n\tinitSnake() {\n\t\t// center of the board\n\t\tconst x = this.state.width  / 2;\n\t\tconst y = this.state.height / 2;\n\t\t\n\t\tlet snake = [];\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tsnake.push([x + i, y]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tsnake: snake\n\t\t});\n\t}\n\n\tredrawSnake() {\n\n\t}\n\n\tdrawFood() {\n\t\t// a random square on the board\n\t\tlet x = Math.floor(Math.random() * this.state.width);\n\t\tlet y = Math.floor(Math.random() * this.state.height);\n\n\t\t// find another square if it's part of the snake\n\t\twhile (this.isColliding([x, y], this.state.snake)) {\n\t\t\tx = Math.floor(Math.random() * this.state.width);\n\t\t\ty = Math.floor(Math.random() * this.state.height);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfood: [x, y]\n\t\t});\n\t}\n\n\tisColliding(square, arr) {\n\t\tarr.forEach((e) => {\n\t\t\tif (square[0] === e[0] && square[1] === e[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn false;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"game-title\">{\"Snake\"}</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\trow={this.state.height}\n\t\t\t\t\t\tcol={this.state.width}\n\t\t\t\t\t\ttypeOf={this.typeOf}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}